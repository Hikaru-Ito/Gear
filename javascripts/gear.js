// Generated by CoffeeScript 1.7.1
var AnimationTime, ExpandTime, HideTime, StepTime, autoexpand, browserHeight, calc, dispLine, display, dontShowSingleNode, downfunc, expand, expandTimeout, hashIndex, hideLines, hideTimeout, initData, intValue, json, keydownfunc, lineHeight, loadData, menuFontSize, mousedowny, mouseisdown, move, movefunc, nasty, nextNode, nodeList, node_app, oldNodeList, oldSpans, pauseAtLevelChange, prevNode, refresh, resizefunc, showContents, singleWindow, spans, step, typeCount, typeCountTimeout, upfunc, useAnimation;

if (typeof useAnimation === "undefined" || useAnimation === null) {
  useAnimation = true;
}

if (typeof showContents === "undefined" || showContents === null) {
  showContents = true;
}

if (typeof autoexpand === "undefined" || autoexpand === null) {
  autoexpand = true;
}

if (typeof pauseAtLevelChange === "undefined" || pauseAtLevelChange === null) {
  pauseAtLevelChange = true;
}

if (typeof dontShowSingleNode === "undefined" || dontShowSingleNode === null) {
  dontShowSingleNode = true;
}

if (typeof singleWindow === "undefined" || singleWindow === null) {
  singleWindow = false;
}

if (typeof json === "undefined" || json === null) {
  json = 'data.json';
}

node_app = typeof require !== 'undefined';

if (node_app) {
  singleWindow = true;
}

if (singleWindow) {
  menuFontSize = 18;
  lineHeight = 30;
} else {
  menuFontSize = 11;
  lineHeight = 20;
}

nodeList = {};

oldNodeList = {};

spans = {};

oldSpans = {};

StepTime = 1000;

ExpandTime = 1500;

expandTimeout = null;

AnimationTime = 300;

HideTime = 1600;

hideTimeout = null;

typeCount = 0;

typeCountTimeout = null;

loadData = function() {
  return $.getJSON(json, function(data) {
    initData(data, null, 0);
    calc(data[0]);
    return expandTimeout = setTimeout(expand, ExpandTime);
  });
};

initData = function(nodes, parent, level) {
  var i, node, _i, _ref, _results;
  _results = [];
  for (i = _i = 0, _ref = nodes.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    node = nodes[i];
    node.level = level;
    node.elder = (i > 0 ? nodes[i - 1] : null);
    node.younger = (i < nodes.length - 1 ? nodes[i + 1] : null);
    node.parent = parent;
    if (node.children) {
      _results.push(initData(node.children, node, level + 1));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

$(function() {
  var height, menuwidth, nativeMenuBar, nw, param, width, win;
  if (node_app) {
    nw = require('nw.gui');
    win = nw.Window.get();
    nativeMenuBar = new nw.Menu({
      type: "menubar"
    });
    if (nativeMenuBar.createMacBuiltin) {
      nativeMenuBar.createMacBuiltin("Gear", {
        hideEdit: true,
        hideWindow: true
      });
      win.menu = nativeMenuBar;
    }
    window.addEventListener("resize", function() {
      return win.enterFullscreen();
    }, false);
  }
  loadData();
  if (showContents) {
    if (singleWindow) {

    } else {
      height = screen.availHeight;
      menuwidth = screen.availWidth / 5;
      if (menuwidth > 300) {
        menuwidth = 300;
      }
      width = screen.availWidth - menuwidth;
      param = "top=0,left=" + menuwidth + ",height=" + height + ",width=" + width + ",scrollbars=yes";
      $.contentswin = window.open("", "Contents", param);
    }
  }
  if (singleWindow) {
    return $('#menu').css('left', '200pt');
  } else {
    return $('#menu').css('left', '10pt');
  }
});

refresh = function() {
  var i, span, _results;
  for (i in spans) {
    span = spans[i];
    span.show();
  }
  _results = [];
  for (i in oldSpans) {
    span = oldSpans[i];
    _results.push(span.remove());
  }
  return _results;
};

browserHeight = function() {
  if (window.innerHeight) {
    return window.innerHeight;
  }
  if (document.body) {
    return document.body.clientHeight;
  }
  return 0;
};

resizefunc = function() {
  var height, width;
  height = screen.height;
  width = screen.width;
  $('body').css('width', width);
  $('body').css('height', height);
  $('#iframe').css('width', width);
  $('#iframe').css('height', height);
  $('#image').css('width', width);
  $('#image').css('height', height);
  $('#menu').css('height', height);
  $('#panel').css('width', width);
  return $('#panel').css('height', height);
};

expand = function() {
  var shrinking;
  if (singleWindow) {
    clearTimeout(hideTimeout);
    hideTimeout = setTimeout(hideLines, HideTime);
  }
  expandTimeout = null;
  shrinking = false;
  if (nodeList[0].children) {
    calc(nodeList[0].children[0]);
    return expandTimeout = setTimeout(expand, StepTime);
  }
};

intValue = function(s) {
  return Number(s.replace(/px/, ''));
};

hideLines = function() {
  return $('span').animate({
    opacity: 0.0
  }, 700);
};

dispLine = function(node, ind, top, color, bold, parent, showloading) {
  var span;
  if (singleWindow) {
    if (typeCount < 2 && !nodeList[0].children) {
      return;
    }
  }
  span = $('<span>');
  span.attr('class', 'line');
  span.css('width', parent.css('width'));
  span.css('color', color);
  span.css('top', String(top) + 'pt');
  if (bold) {
    span.css('font-weight', 'bold');
  }
  span.css('font-size', menuFontSize + 'pt');
  span.text(Array(node.level + 1).join("　") + '・' + node.title);
  if (showloading) {
    span.append($(' <span>&nbsp;</span>'));
    span.append($('<img src="images/loading.gif" style="height:12pt;">'));
  }
  parent.append(span);
  if (useAnimation) {
    span.hide();
  }
  spans[ind] = span;
  return node.span = span;
};

hashIndex = function(hash, entry) {
  var key, val;
  for (key in hash) {
    val = hash[key];
    if (val === entry) {
      return key;
    }
  }
  return null;
};

calc = function(centerNode) {
  var i, newNodeList, node;
  newNodeList = {};
  newNodeList[0] = centerNode;
  node = centerNode;
  i = 0;
  while (node = nextNode(node)) {
    newNodeList[++i] = node;
  }
  node = centerNode;
  i = 0;
  while (node = prevNode(node)) {
    newNodeList[--i] = node;
  }
  return display(newNodeList);
};

nextNode = function(node) {
  var nextnode;
  nextnode = node.younger;
  while (!nextnode && node.parent) {
    node = node.parent;
    nextnode = node.younger;
  }
  return nextnode;
};

prevNode = function(node) {
  var prevnode;
  prevnode = node.elder;
  while (!prevnode && node.parent) {
    prevnode = node.parent;
  }
  return prevnode;
};

nasty = function(url) {
  return (url.match(/twitter\.com/i)) || (url.match(/www\.ted\.com/i));
};

display = function(newNodeList) {
  var center, dest, i, j, menu, newnode, node, oldnode, parent, top, url, _results;
  oldNodeList = nodeList;
  nodeList = newNodeList;
  oldSpans = spans;
  spans = {};
  center = browserHeight() / 2;
  url = nodeList[0].url;
  if (url && showContents) {
    if (singleWindow) {
      if (showContents && !nasty(url)) {
        if (url.match(/(gif|jpg|jpeg|png)$/i)) {
          $('#iframe').css('display', 'none');
          $('#image').css('display', 'block');
          $('#image').attr('src', url);
        } else {
          $('#iframe').css('display', 'block');
          $('#image').css('display', 'none');
          $('#iframe').attr('src', url);
        }
      }
    } else {
      $.contentswin.location.href = url;
    }
  }
  node = nodeList[0];
  menu = $('#menu');
  dispLine(node, 0, center, '#0000ff', true, menu, node.children);
  i = 1;
  while (node = nodeList[i]) {
    top = center + i * lineHeight;
    if (top > browserHeight() - 40) {
      break;
    }
    dispLine(node, i, top, '#000000', false, menu, false);
    i += 1;
  }
  i = -1;
  while (node = nodeList[i]) {
    top = center + i * lineHeight;
    if (top < 0) {
      break;
    }
    dispLine(node, i, top, '#000000', false, menu, false);
    i -= 1;
  }
  if (useAnimation) {
    for (i in oldNodeList) {
      oldnode = oldNodeList[i];
      if (j = hashIndex(nodeList, oldnode)) {
        if (spans[j]) {
          if (oldSpans[i]) {
            oldSpans[i].animate({
              top: nodeList[j].span.css('top')
            }, {
              duration: AnimationTime,
              complete: function() {
                typeCount = 2;
                return refresh();
              }
            });
          }
        } else {
          if (oldnode.span) {
            oldnode.span.hide();
          }
        }
      } else {
        if (typeof shrinking !== "undefined" && shrinking !== null) {
          if (j = hashIndex(nodeList, oldnode.parent)) {
            if (oldSpans[i]) {
              oldSpans[i].animate({
                top: nodeList[j].span.css('top'),
                color: '#ffffff',
                opacity: 0.1
              }, {
                duration: AnimationTime,
                complete: function() {
                  this.remove();
                  typeCount = 2;
                  return refresh();
                }
              });
            }
          }
        } else {
          if (oldnode.span !== void 0) {
            oldnode.span.hide();
          }
        }
      }
    }
    _results = [];
    for (i in nodeList) {
      newnode = nodeList[i];
      if (null === hashIndex(oldNodeList, newnode)) {
        parent = newnode.parent;
        if (parent && (typeof shrinking === "undefined" || shrinking === null)) {
          if (j = hashIndex(nodeList, parent)) {
            if (newnode.span) {
              dest = newnode.span.css('top');
              newnode.span.show();
              newnode.span.css('opacity', 0);
              newnode.span.css('top', intValue(parent.span.css('top')) + 20);
              _results.push(newnode.span.animate({
                top: dest,
                color: '#000000',
                opacity: 1.0
              }, {
                duration: AnimationTime,
                complete: function() {
                  typeCount = 2;
                  return refresh();
                }
              }));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
};

move = function(delta, shrinkMode) {
  var i, newNodeList, shrinking;
  if (typeCount === 0) {
    clearTimeout(typeCountTimeout);
    typeCount = 1;
    typeCountTimeout = setTimeout(function() {
      return typeCount = 0;
    }, 1000);
  } else if (typeCount === 1) {
    clearTimeout(typeCountTimeout);
    typeCount = 2;
    typeCountTimeout = setTimeout(function() {
      return typeCount = 0;
    }, 1000);
  } else if (typeCount === 2) {
    clearTimeout(typeCountTimeout);
    typeCount = 2;
    typeCountTimeout = setTimeout(function() {
      return typeCount = 0;
    }, 1000);
  }
  refresh();
  if (singleWindow) {
    clearTimeout(hideTimeout);
    hideTimeout = setTimeout(hideLines, HideTime);
  }
  clearTimeout(expandTimeout);
  if (!mouseisdown) {
    expandTimeout = setTimeout(expand, ExpandTime);
  }
  shrinking = true;
  if (nodeList[delta]) {
    if (shrinkMode === 0) {
      calc(nodeList[delta]);
    } else {
      newNodeList = {};
      i = 0;
      while (nodeList[i + delta]) {
        newNodeList[i] = nodeList[i + delta];
        i += 1;
      }
      i = -1;
      while (nodeList[i + delta]) {
        newNodeList[i] = nodeList[i + delta];
        i -= 1;
      }
      display(newNodeList);
    }
  }
  return false;
};

$(window).mousewheel(function(event, delta, deltaX, deltaY) {
  var d;
  d = (delta < 0 ? 1 : -1);
  return move(d, 1);
});

mouseisdown = false;

mousedowny = 0;

step = 0;

downfunc = function(e) {
  e.preventDefault();
  if (e.type === 'mousedown') {
    mousedowny = e.pageY;
  }
  if (e.type === 'touchstart') {
    mousedowny = event.changedTouches[0].pageY;
  }
  return mouseisdown = true;
};

upfunc = function(e) {
  e.preventDefault();
  mouseisdown = false;
  clearTimeout(expandTimeout);
  expandTimeout = setTimeout(expand, ExpandTime);
  return step = 0;
};

movefunc = function(e) {
  var delta, i, newstep, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
  e.preventDefault();
  delta = 0;
  if (mouseisdown) {
    if (e.type === 'mousemove') {
      delta = e.pageY - mousedowny;
    }
    if (e.type === 'touchmove') {
      delta = event.changedTouches[0].pageY - mousedowny;
    }
    if (delta > 0) {
      newstep = Math.floor(delta / 20.0);
      if (newstep > step) {
        for (i = _i = 0, _ref = newstep - step; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          move(-1, 1);
        }
      } else {
        for (i = _j = 0, _ref1 = step - newstep; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          move(1, 1);
        }
      }
    } else {
      newstep = Math.floor((0 - delta) / 20.0);
      if (newstep > step) {
        for (i = _k = 0, _ref2 = newstep - step; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          move(1, 1);
        }
      } else {
        for (i = _l = 0, _ref3 = step - newstep; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
          move(-1, 1);
        }
      }
    }
    return step = newstep;
  }
};

keydownfunc = function(e) {
  switch (e.keyCode) {
    case 40:
      return move(1, 0);
    case 39:
      return move(1, 1);
    case 38:
      return move(-1, 0);
    case 37:
      return move(-1, 1);
  }
};

$(window).on({
  'mousedown': downfunc,
  'touchstart': downfunc,
  'mouseup': upfunc,
  'touchend': upfunc,
  'mousemove': movefunc,
  'touchmove': movefunc,
  'keydown': keydownfunc,
  'resize': resizefunc
});
